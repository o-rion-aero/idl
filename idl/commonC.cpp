// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:376


#include "commonC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "commonC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Vector2[] =
      {
        { "x", &CORBA::_tc_double },
        { "y", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Vector2 (
  ::CORBA::tk_struct,
  "IDL:Vector2:1.0",
  "Vector2",
  _tao_fields_Vector2,
  2);

::CORBA::TypeCode_ptr const _tc_Vector2 =
  &_tao_tc_Vector2;

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
Vector2::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Vector2 *_tao_tmp_pointer =
    static_cast<Vector2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Vector3[] =
      {
        { "x", &CORBA::_tc_double },
        { "y", &CORBA::_tc_double },
        { "z", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Vector3 (
  ::CORBA::tk_struct,
  "IDL:Vector3:1.0",
  "Vector3",
  _tao_fields_Vector3,
  3);

::CORBA::TypeCode_ptr const _tc_Vector3 =
  &_tao_tc_Vector3;

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
Vector3::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Vector3 *_tao_tmp_pointer =
    static_cast<Vector3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Vector2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Vector2>::insert_copy (
    _tao_any,
    Vector2::_tao_any_destructor,
    _tc_Vector2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Vector2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Vector2>::insert (
    _tao_any,
    Vector2::_tao_any_destructor,
    _tc_Vector2,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Vector2 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Vector2 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Vector2 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Vector2>::extract (
      _tao_any,
      Vector2::_tao_any_destructor,
      _tc_Vector2,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Vector3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Vector3>::insert_copy (
    _tao_any,
    Vector3::_tao_any_destructor,
    _tc_Vector3,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Vector3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Vector3>::insert (
    _tao_any,
    Vector3::_tao_any_destructor,
    _tc_Vector3,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Vector3 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Vector3 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Vector3 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Vector3>::extract (
      _tao_any,
      Vector3::_tao_any_destructor,
      _tc_Vector3,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Vector2 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Vector2 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\opendds-3.10-win32-debug\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Vector3 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << _tao_aggregate.z);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Vector3 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> _tao_aggregate.z);
}

TAO_END_VERSIONED_NAMESPACE_DECL



