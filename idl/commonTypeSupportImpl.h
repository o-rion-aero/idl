/* -*- C++ -*- */
/* Generated by opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file common.idl */
#ifndef OPENDDS_IDL_GENERATED_COMMONTYPESUPPORTIMPL_H_JJH9WP
#define OPENDDS_IDL_GENERATED_COMMONTYPESUPPORTIMPL_H_JJH9WP
#include "commonC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DCPS/Serializer.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin STRUCT: Vector2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Vector2& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Vector2& stru);

bool operator>>(Serializer& strm, Vector2& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<Vector2>();
void gen_skip_over(Serializer& ser, Vector2*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Vector2 */


/* Begin STRUCT: Vector3 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Vector3& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Vector3& stru);

bool operator>>(Serializer& strm, Vector3& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Vector3>();
void gen_skip_over(Serializer& ser, Vector3*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Vector3 */
#endif /* OPENDDS_IDL_GENERATED_COMMONTYPESUPPORTIMPL_H_JJH9WP */
