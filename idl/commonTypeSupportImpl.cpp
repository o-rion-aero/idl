/* Generated by opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file common.idl */
#include "commonTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/PoolAllocator.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin STRUCT: Vector2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Vector2& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.x);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.y);
}

bool operator<<(Serializer& strm, const Vector2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.x)
    && (strm << stru.y);
}

bool operator>>(Serializer& strm, Vector2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.x)
    && (strm >> stru.y);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Vector2> : MetaStruct {
  typedef Vector2 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Vector2& typed = *static_cast<const Vector2*>(stru);
    if (std::strcmp(field, "x") == 0) {
      return typed.x;
    }
    if (std::strcmp(field, "y") == 0) {
      return typed.y;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector2)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "x") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'x' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "y") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'y' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Vector2");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "x") == 0) {
      return make_field_cmp(&T::x, next);
    }
    if (std::strcmp(field, "y") == 0) {
      return make_field_cmp(&T::y, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector2)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"x", "y", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "x") == 0) {
      return &static_cast<const T*>(stru)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return &static_cast<const T*>(stru)->y;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector2)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "x") == 0) {
      static_cast<T*>(lhs)->x = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "y") == 0) {
      static_cast<T*>(lhs)->y = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector2)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "x") == 0) {
      return static_cast<const T*>(lhs)->x == static_cast<const T*>(rhs)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return static_cast<const T*>(lhs)->y == static_cast<const T*>(rhs)->y;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector2)");
  }
};

template<>
const MetaStruct& getMetaStruct<Vector2>()
{
  static MetaStructImpl<Vector2> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Vector2*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Vector2>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Vector2 */


/* Begin STRUCT: Vector3 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Vector3& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.x);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.y);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.z);
}

bool operator<<(Serializer& strm, const Vector3& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.x)
    && (strm << stru.y)
    && (strm << stru.z);
}

bool operator>>(Serializer& strm, Vector3& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.x)
    && (strm >> stru.y)
    && (strm >> stru.z);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Vector3> : MetaStruct {
  typedef Vector3 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Vector3& typed = *static_cast<const Vector3*>(stru);
    if (std::strcmp(field, "x") == 0) {
      return typed.x;
    }
    if (std::strcmp(field, "y") == 0) {
      return typed.y;
    }
    if (std::strcmp(field, "z") == 0) {
      return typed.z;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector3)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "x") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'x' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "y") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'y' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "z") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'z' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Vector3");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "x") == 0) {
      return make_field_cmp(&T::x, next);
    }
    if (std::strcmp(field, "y") == 0) {
      return make_field_cmp(&T::y, next);
    }
    if (std::strcmp(field, "z") == 0) {
      return make_field_cmp(&T::z, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector3)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"x", "y", "z", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "x") == 0) {
      return &static_cast<const T*>(stru)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return &static_cast<const T*>(stru)->y;
    }
    if (std::strcmp(field, "z") == 0) {
      return &static_cast<const T*>(stru)->z;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector3)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "x") == 0) {
      static_cast<T*>(lhs)->x = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "y") == 0) {
      static_cast<T*>(lhs)->y = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "z") == 0) {
      static_cast<T*>(lhs)->z = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector3)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "x") == 0) {
      return static_cast<const T*>(lhs)->x == static_cast<const T*>(rhs)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return static_cast<const T*>(lhs)->y == static_cast<const T*>(rhs)->y;
    }
    if (std::strcmp(field, "z") == 0) {
      return static_cast<const T*>(lhs)->z == static_cast<const T*>(rhs)->z;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Vector3)");
  }
};

template<>
const MetaStruct& getMetaStruct<Vector3>()
{
  static MetaStructImpl<Vector3> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Vector3*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Vector3>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Vector3 */
