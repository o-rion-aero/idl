/* Generated by opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file client.idl */
#include "clientTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/PoolAllocator.h"
#include ".\commonTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin STRUCT: Vector2 */


/* End STRUCT: Vector2 */


/* Begin STRUCT: Vector3 */


/* End STRUCT: Vector3 */


/* Begin MODULE: IDL */



/* Begin MODULE: Client */



/* Begin MODULE: Pilot */



/* Begin MODULE: Simulator */



/* Begin STRUCT: AircraftSituation */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const IDL::Client::Pilot::Simulator::AircraftSituation& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.position, size, padding);
  gen_find_size(stru.rotation, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.simulatorId);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.speed);
}

bool operator<<(Serializer& strm, const IDL::Client::Pilot::Simulator::AircraftSituation& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.position)
    && (strm << stru.rotation)
    && (strm << stru.simulatorId)
    && (strm << stru.speed);
}

bool operator>>(Serializer& strm, IDL::Client::Pilot::Simulator::AircraftSituation& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.position)
    && (strm >> stru.rotation)
    && (strm >> stru.simulatorId)
    && (strm >> stru.speed);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<IDL::Client::Pilot::Simulator::AircraftSituation> : MetaStruct {
  typedef IDL::Client::Pilot::Simulator::AircraftSituation T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const IDL::Client::Pilot::Simulator::AircraftSituation& typed = *static_cast<const IDL::Client::Pilot::Simulator::AircraftSituation*>(stru);
    if (std::strncmp(field, "position.", 9) == 0) {
      return getMetaStruct<Vector3>().getValue(&typed.position, field + 9);
    }
    if (std::strncmp(field, "rotation.", 9) == 0) {
      return getMetaStruct<Vector3>().getValue(&typed.rotation, field + 9);
    }
    if (std::strcmp(field, "simulatorId") == 0) {
      return typed.simulatorId;
    }
    if (std::strcmp(field, "speed") == 0) {
      return typed.speed;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct IDL::Client::Pilot::Simulator::AircraftSituation)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "position.", 9) == 0) {
      return getMetaStruct<Vector3>().getValue(ser, field + 9);
    } else {
      gen_skip_over(ser, static_cast<Vector3*>(0));
    }
    if (std::strncmp(field, "rotation.", 9) == 0) {
      return getMetaStruct<Vector3>().getValue(ser, field + 9);
    } else {
      gen_skip_over(ser, static_cast<Vector3*>(0));
    }
    if (std::strcmp(field, "simulatorId") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'simulatorId' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "speed") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'speed' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct IDL::Client::Pilot::Simulator::AircraftSituation");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "position.", 9) == 0) {
      return make_struct_cmp(&T::position, getMetaStruct<Vector3>().create_qc_comparator(field + 9), next);
    }
    if (std::strncmp(field, "rotation.", 9) == 0) {
      return make_struct_cmp(&T::rotation, getMetaStruct<Vector3>().create_qc_comparator(field + 9), next);
    }
    if (std::strcmp(field, "simulatorId") == 0) {
      return make_field_cmp(&T::simulatorId, next);
    }
    if (std::strcmp(field, "speed") == 0) {
      return make_field_cmp(&T::speed, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct IDL::Client::Pilot::Simulator::AircraftSituation)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"position", "rotation", "simulatorId", "speed", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "position") == 0) {
      return &static_cast<const T*>(stru)->position;
    }
    if (std::strcmp(field, "rotation") == 0) {
      return &static_cast<const T*>(stru)->rotation;
    }
    if (std::strcmp(field, "simulatorId") == 0) {
      return &static_cast<const T*>(stru)->simulatorId;
    }
    if (std::strcmp(field, "speed") == 0) {
      return &static_cast<const T*>(stru)->speed;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct IDL::Client::Pilot::Simulator::AircraftSituation)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "position") == 0) {
      static_cast<T*>(lhs)->position = *static_cast<const Vector3*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "rotation") == 0) {
      static_cast<T*>(lhs)->rotation = *static_cast<const Vector3*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "simulatorId") == 0) {
      static_cast<T*>(lhs)->simulatorId = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "speed") == 0) {
      static_cast<T*>(lhs)->speed = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct IDL::Client::Pilot::Simulator::AircraftSituation)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "simulatorId") == 0) {
      return static_cast<const T*>(lhs)->simulatorId == static_cast<const T*>(rhs)->simulatorId;
    }
    if (std::strcmp(field, "speed") == 0) {
      return static_cast<const T*>(lhs)->speed == static_cast<const T*>(rhs)->speed;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct IDL::Client::Pilot::Simulator::AircraftSituation)");
  }
};

template<>
const MetaStruct& getMetaStruct<IDL::Client::Pilot::Simulator::AircraftSituation>()
{
  static MetaStructImpl<IDL::Client::Pilot::Simulator::AircraftSituation> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, IDL::Client::Pilot::Simulator::AircraftSituation*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<IDL::Client::Pilot::Simulator::AircraftSituation>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: AircraftSituation */

/* End MODULE: Simulator */

/* End MODULE: Pilot */

/* End MODULE: Client */

/* End MODULE: IDL */
